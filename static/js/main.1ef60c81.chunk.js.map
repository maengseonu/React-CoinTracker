{"version":3,"sources":["routes/api.ts","routes/atoms.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","isDarkAtom","atom","key","default","Chart","coinId","isDark","useRecoilValue","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","type","series","name","map","price","close","options","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","PriceInfo","styled","ul","PriceInfos","li","props","bgColor","Price","fetchCoinPrice","quotes","USD","percent_change_24h","Container","div","Header","header","Back","Loader","span","Title","h1","accentColor","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickes","tickersLoading","tickersData","loading","Helmet","to","rank","symbol","description","total_supply","max_supply","path","CoinsList","borderColor","Img","img","Coins","setDarkAtom","useSetRecoilState","onClick","prev","slice","coin","pathname","id","src","toLowerCase","Router","basename","process","darkTheme","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.1ef60c81.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickes(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n\nexport function fetchCoinPrice(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n","import { atom } from \"recoil\";\n\nexport const isDarkAtom = atom({\n  key: \"isDark\",\n  default: true,\n});\n","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./api\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart({ coinId }: ChartProps) {\n  const isDark = useRecoilValue(isDarkAtom);\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 5000,\n    }\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading Chart...\"\n      ) : (\n        <ApexChart\n          type=\"line\"\n          series={[\n            {\n              name: \"price\",\n              data: data?.map((price) => price.close),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: isDark ? \"dark\" : \"light\",\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: \"transparent\",\n            },\n            grid: { show: false },\n            stroke: {\n              curve: \"smooth\",\n              width: 4,\n            },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              labels: { show: false },\n              type: \"datetime\",\n              categories: data?.map((price) => price.time_close),\n            },\n            fill: {\n              type: \"gradient\",\n              gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\n            },\n            colors: [\"#0fbcf9\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `$${value.toFixed(2)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n","import { useQuery } from \"react-query\";\nimport styled from \"styled-components\";\nimport { fetchCoinPrice } from \"./api\";\n\nconst PriceInfo = styled.ul``;\n\nconst PriceInfos = styled.li`\n  color: ${(props) => props.theme.bgColor};\n  div {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    padding: 20px;\n    background-color: #f5f6fa;\n    border-radius: 15px;\n    margin-bottom: 10px;\n    color: #4cd137;\n    font-weight: 700;\n    font-size: 30px;\n    span {\n      color: black;\n    }\n  }\n`;\n\ninterface PriceProps {\n  coinId: string;\n}\n\ninterface priceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Price({ coinId }: PriceProps) {\n  const { isLoading, data } = useQuery<priceData>([\"price\", coinId], () =>\n    fetchCoinPrice(coinId)\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading Chart...\"\n      ) : (\n        <PriceInfo>\n          <PriceInfos>\n            <div>\n              <span>가격</span>${data?.quotes.USD.price.toFixed(3)}\n            </div>\n            <div>\n              <span>24h</span>\n              {data?.quotes.USD.percent_change_24h}%\n            </div>\n          </PriceInfos>\n        </PriceInfo>\n      )}\n    </div>\n  );\n}\n\nexport default Price;\n","import { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickes } from \"./api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  align-items: center;\n`;\n\nconst Back = styled.div`\n  width: 33%;\n  font-size: 30px;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    display: block;\n  }\n`;\n\ninterface RouteParams {\n  coinId: string;\n}\n\ninterface RouteState {\n  name: string;\n}\n\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  contract: string;\n  platform: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\ninterface priceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Coin() {\n  const { coinId } = useParams<RouteParams>();\n  const { state } = useLocation<RouteState>();\n\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\n\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId),\n    {\n      refetchInterval: 1000,\n    }\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<priceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickes(coinId)\n  );\n\n  /* const [loading, setLoading] = useState(true);\n  const [info, setInfo] = useState<InfoData>();\n  const [priceInfo, setPriceInfo] = useState<priceData>();\n  useEffect(() => {\n    (async () => {\n      const infoData = await (\n        await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n      ).json();\n\n      const priceData = await (\n        await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n      ).json();\n      setInfo(infoData);\n      setPriceInfo(priceData);\n      setLoading(false);\n    })();\n  }, [coinId]); */\n\n  const loading = infoLoading || tickersLoading;\n\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n\n      <Header>\n        <Back>\n          <Link to={\"/\"}>&larr;</Link>\n        </Back>\n        <Title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>{infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>${tickersData?.quotes.USD.price.toFixed(2)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n          <Switch>\n            <Route path={`/:coinId/price`}>\n              <Price coinId={coinId} />\n            </Route>\n            <Route path={`/:coinId/chart`}>\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default Coin;\n","import { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"./api\";\nimport { useSetRecoilState } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  border: 1px solid ${(props) => props.theme.borderColor};\n  a {\n    display: flex;\n    align-items: center;\n    transition: color 0.2s ease-in-out;\n    padding: 20px;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n        <button onClick={toggleDarkAtom}>모드 전환</button>\n      </Header>\n      {isLoading ? (\n        <Loader>\"Loading...\"</Loader>\n      ) : (\n        <CoinsList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\n\nexport default Coins;\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\n\nfunction Router() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n          <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#8c7ae6\",\n  borderColor: \"white\",\n};\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#8c7ae6\",\n  borderColor: \"black\",\n};\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./routes/atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na{\n  text-decoration: none;\n  color: inherit;\n  font-weight: 600;\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}